// Generated by CoffeeScript 1.7.1
var ChartView, sortUtil, util, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = window._;

util = require('../../helpers/graph-util.coffee');

sortUtil = require('../../helpers/sorting.coffee');

ChartView = (function(_super) {
  __extends(ChartView, _super);

  function ChartView() {
    return ChartView.__super__.constructor.apply(this, arguments);
  }

  ChartView.prototype.template = require('./chart-view.jade');

  ChartView.prototype.model = "BillModel";

  ChartView.prototype.className = 'test';

  ChartView.prototype.events = {
    'mouseover [data-amdt]': 'showAmendmentData',
    'click #oldest': 'oldestFirst',
    'click #newest': 'newestFirst',
    'click #dem-total': 'demTotal',
    'click #rep-total': 'repTotal',
    'click #dem-biased': 'demBiased',
    'click #rep-biased': 'repBiased',
    'click #least-voted': 'leastVoted',
    'click #most-voted': 'mostVoted'
  };

  ChartView.prototype.initialize = function() {};

  ChartView.defaults = function() {
    var margin;
    return margin = {
      top: 30,
      right: 10,
      bottom: 10,
      left: 10
    };
  };

  ChartView.prototype.render = function() {
    var buttonHolder, buttons, data, dems, height, makePositive, margin, max, pair, parseDate, reps, staticAxis, svg, ticks, votes, width, x, xAxis, y, _i, _len;
    votes = this.model.get('votes');
    data = votes.filter(function(ammendment) {
      if (ammendment.vote) {
        return ammendment;
      }
    });
    data = data.map(util.buildData).sort(sortUtil.order);
    parseDate = d3.time.format("%Y-%m-%dT%H:%M:%SZ").parse;
    margin = {
      top: 30,
      right: 10,
      bottom: 10,
      left: 10
    };
    width = $("#chart").width() - margin.right - margin.left;
    height = data.length * 12;
    x = d3.scale.linear().range([0, width]);
    y = d3.scale.ordinal().rangeRoundBands([0, height], .2);
    makePositive = function(x) {
      return Math.abs(x);
    };
    ticks = [-250, -200, -150, -100, -50, 0, 50, 100, 150, 200, 250];
    buttons = [['oldest', 'oldest'], ['newest', 'newest'], ['dem-total', 'most dem votes'], ['rep-total', 'most rep votes'], ['dem-biased', 'most dem weighted'], ['rep-biased', 'most rep weighted'], ['most-voted', 'most voted'], ['least-voted', 'least voted']];
    buttonHolder = this.$el;
    for (_i = 0, _len = buttons.length; _i < _len; _i++) {
      pair = buttons[_i];
      buttonHolder.append("<button id=" + pair[0] + ">" + pair[1] + "</button>");
    }
    console.log(this.$el);
    xAxis = d3.svg.axis().scale(x).orient('top').tickValues(ticks).tickFormat(makePositive);
    staticAxis = d3.select('#axis').append('svg').attr('width', width + margin.left + margin.right).attr('height', '30px').append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
    svg = d3.select(this.el).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ')');
    console.log(svg);
    dems = data.map(function(el) {
      return el.demY;
    });
    reps = data.map(function(el) {
      return el.repY;
    });
    max = Math.max(d3.max(dems), d3.max(reps));
    x.domain([-max, max]).nice();
    y.domain(data.map(function(d) {
      return d.number;
    }));
    svg.selectAll('.bar').data(data).enter().append('g').attr('class', 'amdt-bar').each(function(el, i) {
      d3.select(this).append('rect').attr('class', 'bar republican').attr('height', function(d) {
        return 10;
      }).attr('width', function(d) {
        return Math.abs((x(d.repY)) - (x(0)));
      }).attr('x', function(d) {
        return x(0);
      });
      d3.select(this).append('rect').attr('class', 'bar democrat').attr('height', function(d) {
        return 10;
      }).attr('width', function(d) {
        return Math.abs((x(d.demY)) - (x(0)));
      }).attr('x', function(d) {
        return x(-d.demY);
      });
      return d3.select(this).attr('data-amdt', function(d) {
        return d.amdt;
      }).attr('transform', 'translate(' + 0 + ',' + i * 15 + ')');
    });
    staticAxis.append('g').attr('class', 'x axis').call(xAxis);
    svg.append('g').attr('class', 'y axis').attr('transform', 'translate(0, 0)').append('line').attr('x1', x(0)).attr('x2', x(0)).attr('y2', height);
    return this.svg = svg;
  };

  ChartView.prototype.showAmendmentData = function(e) {
    var amendmentData, amendmentId;
    amendmentId = this.$(e.currentTarget).attr('data-amdt');
    amendmentData = _.findWhere(this.model.get('votes'), {
      amendment_id: amendmentId
    });
    return this.trigger('showAmendmentData', amendmentData);
  };

  ChartView.prototype.oldestFirst = function(e) {
    return sortUtil.sortBy(this.svg, sortUtil.oldestFirst);
  };

  ChartView.prototype.newestFirst = function(e) {
    return sortUtil.sortBy(this.svg, sortUtil.newestFirst);
  };

  ChartView.prototype.demTotal = function(e) {
    return sortUtil.sortBy(this.svg, sortUtil.democratTotal);
  };

  ChartView.prototype.repTotal = function(e) {
    return sortUtil.sortBy(this.svg, sortUtil.republicanTotal);
  };

  ChartView.prototype.demBiased = function(e) {
    return sortUtil.sortBy(this.svg, sortUtil.democratDiff);
  };

  ChartView.prototype.repBiased = function(e) {
    return sortUtil.sortBy(this.svg, sortUtil.republicanDiff);
  };

  ChartView.prototype.leastVoted = function(e) {
    return sortUtil.sortBy(this.svg, sortUtil.noVote);
  };

  ChartView.prototype.mostVoted = function(e) {
    return sortUtil.sortBy(this.svg, sortUtil.mostVote);
  };

  return ChartView;

})(Marionette.ItemView);

module.exports = ChartView;
