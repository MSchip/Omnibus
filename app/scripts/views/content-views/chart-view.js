// Generated by CoffeeScript 1.7.1
var ChartView, d3, data, util,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

util = require('../../helpers/graph-util.coffee');

d3 = require('d3');

data = require('./../../../../assets/data/votes_month.json');

ChartView = (function(_super) {
  __extends(ChartView, _super);

  function ChartView() {
    return ChartView.__super__.constructor.apply(this, arguments);
  }

  ChartView.prototype.template = require('./chart-view.jade');

  ChartView.prototype.model = "BillModel";

  ChartView.prototype.initialize = function() {};

  ChartView.prototype.defaults = function() {
    var margin;
    return margin = {
      top: 30,
      right: 10,
      bottom: 10,
      left: 10
    };
  };

  ChartView.prototype.render = function() {
    var dataFix, height, makePositive, margin, parseDate, svg, width, x, xAxis, y;
    data = data.results.votes;
    parseDate = d3.time.format("%Y-%m-%dT%H:%M:%SZ").parse;
    margin = {
      top: 30,
      right: 10,
      bottom: 10,
      left: 10
    };
    width = $("#chart").width() - margin.right - margin.left;
    height = data.length * 10;
    x = d3.scale.linear().range([0, width]);
    y = d3.scale.ordinal().rangeRoundBands([0, height], .2);
    makePositive = function(x) {
      return Math.abs(x);
    };
    xAxis = d3.svg.axis().scale(x).orient("top").tickValues([-250, -200, -150, -100, -50, 0, 50, 100, 150, 200, 250]).tickFormat(makePositive);
    svg = d3.select(this.el).append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    dataFix = data.reduce(function(acc, vote) {
      return acc.concat([
        {
          yes: vote.democratic.yes * -1,
          vote: vote
        }, {
          yes: vote.republican.yes * 1,
          vote: vote
        }
      ]);
    }, []);
    console.log(dataFix);
    x.domain(d3.extent(dataFix, function(d) {
      return d.yes;
    }));
    y.domain(data.map(function(d) {
      return d.description;
    }));
    svg.selectAll(".bar").data(dataFix).enter().append("rect").attr("class", function(d) {
      if (d.yes < 0) {
        return "bar negative";
      } else {
        return "bar positive";
      }
    }).attr("x", function(d) {
      return x(Math.min(0, d.yes));
    }).attr("y", function(d) {
      return y(d.vote.description);
    }).attr("width", function(d) {
      return Math.abs(x(d.yes) - x(0));
    }).attr("height", y.rangeBand());
    svg.append("g").attr("class", "x axis").call(xAxis);
    return svg.append("g").attr("class", "y axis").append("line").attr("x1", x(0)).attr("x2", x(0)).attr("y2", height);
  };

  return ChartView;

})(Marionette.ItemView);

module.exports = ChartView;
